generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model Tattoo {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  slug   String     @unique
  type   TattooType
  styles String[]
  tags   String[]

  artistSlug String?
  artist     Artist? @relation(fields: [artistSlug], references: [slug], onDelete: SetNull)
  ranking    Int     @default(0)

  images TattooImages

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tattoos")
}

type TattooImages {
  images TattooImagesNested[]
  card   TattooImagesNested
}

type TattooImagesNested {
  src    String
  width  Int
  height Int
  blured String
}

type CartItem {
  productId String
  name      String
  price     Float
  variation String
  quantity  Int
}

model UserCart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @unique
  cart   CartItem[]

  @@map("carts")
}

model Artist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  slug        String   @unique
  name        String
  description String?
  tattoos     Tattoo[]

  images ArtistImages
  medias ArtistMedias
  styles String[]

  @@map("artists")
}

type ArtistImages {
  profile    ArtistImage
  background ArtistImage
}

type ArtistImage {
  src    String
  blured String
}

type ArtistMedias {
  instagram String?
  facebook  String?
  website   String?
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
  role          role      @default(user)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @unique
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  variants String[]
}

model PageData {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  main_data   String
  footer_data String
  who_we_are  String

  instagram String
  facebook  String
  twitter   String

  email   String
  address String
}

model Page {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  slug        String @unique
  title       String
  content     String
  description String
}

enum TattooType {
  single
  double
}

enum role {
  user
  artist
  admin
}
