generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Prisma model for Tattoo
model Tattoo {
  id     Int        @id @default(autoincrement())
  slug   String     @unique
  type   TattooType
  styles String[]
  tags   String[]

  images   TattooImages @relation(fields: [imagesId], references: [id])
  imagesId Int          @unique

  artist     Artist @relation(fields: [artistSlug], references: [slug])
  artistSlug String

  @@map("tattoos")
}

model TattooImages {
  id          Int    @id @default(autoincrement())
  main_src    String
  main_width  Int
  main_height Int
  main_blured String

  card_src    String
  card_width  Int
  card_height Int
  card_blured String

  tattoo Tattoo?

  @@map("tattoo_images")
}

enum TattooType {
  single
  double
  quad
}

model Artist {
  slug    String   @id
  name    String
  tattoos Tattoo[]

  @@map("artists")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          role      @default(user)
}

enum role {
  user
  artist
  admin
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
